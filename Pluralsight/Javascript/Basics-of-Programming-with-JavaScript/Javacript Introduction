https://app.pluralsight.com/player?course=javascript-programming-basics&author=kyle-simpson&name=javascript-programming-basics-m1&clip=0&mode=live


The rules for valid format and combinations of instructions is called a computer language, sometimes referred to as its syntax. The syntax of a program language can be thought of like the grammar for spoken/written language. 

Statements
-A statement in a computer language is a group of words, numbers, and operators that performs a specific task. In JavaScript, a statement might look as follows:

	a = b * 2;
	
This statement has four expressions in it:

2 is a literal value expression
b is a variable expression, which means to retrieve its current value
b * 2 is an arithmetic expression, which means to do the multiplication
a = b * 2 is an assignment expression, which means to assign the result of the b * 2 expression to the variable a

Like sentences, statements can also be compound; accomplishing more than one task. But typically there's a 1-to-1 relationship between a statement and what you want to do.

In JS, a completed statement ends in a semicolon ";". Though not always.

A general expression that stands alone is also called an expression statement
	
	b * 2;

They generally aren't useful since nothing is really happening after the expression is run.

A more common expression statement is a call expression statement (see "Functions"), as the entire statement is the function call expression itself:

	alert( a );


Keyword = a word that has special meaning in the language, e.g. "function" or "var".
Identifier = variable


https://app.pluralsight.com/library/courses/developing-sharepoint-2013-javascript
Expressions
Statements are comprised of parts called expressions.

	a = b * 2;
	
Is comprised of several expresion. 
- 2 is a literal expression. an expressed literal value
- b is an identifier expression. because we identified b.
- b * 2 is a multiplication expression/arithmetic expression. because we did math
- a = b * 2 is an assignment expression. because it's being assigned.

If we surround the expressions with parentheses:

	((a) = ((b) * (2)));

and the whole this is a statement.

example
a = b * 2 + foo(c * 3);
[[a] = [[[b] * [2]] + [foo([[c] * [3]])]]];


Operator precedence = order of operations




High level language		Natural language		Set variable a to equal 2
|						
|						Javascript				a = 2
|						Assembly				mov 2,a
V						
Low level languages		Binary					0001001010101010101010110...


Scripting vs compiled languages
Scripting languages, like JavaScript, are interpreted languages; meaning that it's run line-by-line.
Compiled languages take source code and create a binary product

Another way to think about it is the number of passes that source code runs through. Scripting languages get passed through once, at runtime. Compiled languages have multiple passes; each pass possibly checking for something different.

ex:

	1	a = 2;
	2	2();
	
A script engine would start running, run line 1 and then throw a runtime error at line 2.
A compiler would throw an error at the first pass that checks for correct syntax. It looks at all lines before trying to run any lines.

JavaScript is actually compiled. JS will look at the code and throw an error at line 2 before line 1 runs.
	JS does have runtime errors too. Source code can pass syntax, but then do something invalid at runtime.
Versus something like Bash where line 1 would run then fail.



The most common way to print out messages in JS is console.log. This is because server-side JS environments might not have things like alert windows.


Some Consoles return "undefined" after a statements because there are some statement expressions that have no return value.




============================================
JavaScript Syntax
============================================

|Operators|
Operators, e.g. +,-,=,==,===, etc.

There are about 30 operators in JS.

Don't mix single quotes or double quotes just for consistency. There is no functional difference between the two.


|Values and Types|
Converting from one variable type to another is called "coercion". 
	a = String(a);
	b = Number(a);
	
JavaScript variables do not have types, the values have types. This differs from static languages that have types for variables, e.g. certain variables that can only hold intergers or strings, etc.


|Code Comments|
Comment out code with "//" for single-line comments. Or "/*" and */" for multi-line comments. 
Write good comments. Good comments don't say what; they should only say why or how. The code says what's happening. 


|Variables and Blocks|
Always formally declare your variables; preferably before you use it. 
	var a;
	a = 42;

or combine them

	var a = 42;


This is also completely valid due to "hoisting". But it makes the source code less clear.
	a = 42;
	var a;


A block is usually a collection of statements that represent a logical unit surrounded by curly braces "{}". Stylistically, you could use a block to emphasize common statements.
	var b;
	
	{
		var a;
		a = 2;
	}
	
	var c;
The curly braces by themselves don't functionally do anything.

Blocks are usually attached to statements, like the "if", "while", "for", or function statements.
	var a = 42;
	if(a > 10){
		a = 10;
		foo(a / 2);
	}
Blocks attached to statements only get executed in the context of that statement. Like when an if-statement validates to "true", the block will run. Or in the case of functions; the attached block on runs when the function is called.
	function foo() {
		var a = 10;
		bar(a / 2);
	}


|Functions|
A function is a way to logicallly group a piece of code together, like a block, but it also allows you to call that block of code more than once.


|Scope|
There's a difference between the variables that exist outside of functions and varibles that exist outside of functions.
	function foo(){
		var c = 42;
		var a = 12;
		c * 2;
	}
	var c = 6;
The first var c is scoped within the function foo. The second var is scoped outside of function foo.
You can always access variables that are higher than your scope, but never any that are further down. Like var a within foo(), you would not be able to access that variable from a different function.



	
